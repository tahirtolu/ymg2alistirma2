proje yapısı 

proje
 |---backend 
	|---app.py
	|---requirements.txt
	|---dockerfile
 |---frontend	
	|---index.html
	|---dockerfile
|---docker-compose.yml

app.py

from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
import os
from flask_cors import CORS

app = Flask(__name__)
CORS(app)

app.config['SQLALCHEMY_DATABASE_URI'] = os.getenv('DATABASE_URL')
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)

class Personel(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    ad = db.Column(db.String(50))
    soyad = db.Column(db.String(50))
    pozisyon = db.Column(db.String(50))

@app.route('/api/personel', methods=['GET'])
def get_personel():
    data = Personel.query.all()
    return jsonify([{'id': p.id, 'ad': p.ad, 'soyad': p.soyad, 'pozisyon': p.pozisyon} for p in data])

@app.route('/api/personel', methods=['POST'])
def add_personel():
    data = request.get_json()
    p = Personel(ad=data['ad'], soyad=data['soyad'], pozisyon=data['pozisyon'])
    db.session.add(p)
    db.session.commit()
    return jsonify({'id': p.id, 'ad': p.ad, 'soyad': p.soyad, 'pozisyon': p.pozisyon}), 201

if __name__ == '__main__':
    with app.app_context():
        db.create_all()
    app.run(host='0.0.0.0', port=9090)


dockerfile

FROM python:3.9-slim

WORKDIR /app

# Önce requirements.txt'yi kopyala
COPY requirements.txt requirements.txt

# Gerekli paketleri yükle
RUN pip install --no-cache-dir -r requirements.txt

# Netcat'i yükle
RUN apt-get update && apt-get install -y netcat-traditional && rm -rf /var/lib/apt/lists/*

# Tüm uygulama dosyalarını kopyala
COPY . .

# PostgreSQL'in hazır olmasını bekle
CMD ["sh", "-c", "while ! nc -z db 5432; do sleep 1; done && python app.py"]


requirements

flask
flask-sqlalchemy
psycopg2-binary
flask-cors

index

<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <title>Personel Kayıt</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body class="container mt-5">
    <h2>Personel Kayıt</h2>
    <form id="personelForm">
        <input class="form-control my-2" id="ad" placeholder="Ad">
        <input class="form-control my-2" id="soyad" placeholder="Soyad">
        <input class="form-control my-2" id="pozisyon" placeholder="Pozisyon">
        <button type="submit" class="btn btn-primary">Kaydet</button>
    </form>

    <h3 class="mt-5">Personel Listesi:</h3>
    <ul class="list-group" id="personelListesi"></ul>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        const API_BASE = "http://localhost:9090";

        function listele() {
            $.get(`${API_BASE}/api/personel`, function(data) {
                $('#personelListesi').empty();
                data.forEach(p => {
                    $('#personelListesi').append(`<li class="list-group-item">${p.ad} ${p.soyad} - ${p.pozisyon}</li>`);
                });
            });
        }

        $('#personelForm').submit(function(e) {
            e.preventDefault();
            const yeni = {
                ad: $('#ad').val(),
                soyad: $('#soyad').val(),
                pozisyon: $('#pozisyon').val()
            };

            $.ajax({
                type: 'POST',
                url: `${API_BASE}/api/personel`,
                data: JSON.stringify(yeni),
                contentType: 'application/json',
                success: function() {
                    listele();
                    $('#personelForm')[0].reset();
                }
            });
        });

        // Sayfa yüklendiğinde listeyi getir
        $(document).ready(function() {
            listele();
        });
    </script>
</body>
</html>


dcokerfile
FROM nginx:alpine
COPY index.html /usr/share/nginx/html

docker-compose
services:
  backend:
    build: ./backend
    ports:
      - "9090:9090"
    depends_on:
      - db
    environment:
      - DATABASE_URL=postgresql://postgres:123456@db:5432/personeldb
    networks:
      - appnet

  db:
    image: postgres:14
    restart: always
    environment:
      POSTGRES_DB: personeldb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123456
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - appnet

  frontend:
    build: ./frontend
    ports:
      - "6060:80"
    depends_on:
      - backend
    networks:
      - appnet

volumes:
  postgres-data:

networks:
  appnet:

